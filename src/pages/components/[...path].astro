---
import { getCollection, getEntry, render } from "astro:content";
import MainLayout from "../../layouts/MainLayout.astro";

export async function getStaticPaths() {
    const components = await getCollection("lionComponents");

    return [
        ...components.map(lionComponent => ({ params: { path: lionComponent.id }})),
        {params: { path: undefined }}
    ]
}

const { path } = Astro.params;
const components = await getCollection("lionComponents");
const component = await getEntry("lionComponents", path);
const inPageNavData = components.map(component => {
    const [componentName, sectionName] = component.id.split('/');

    return {
        name: sectionName,
        url: `/component.id`,
    }
});
if (!component) {
    // Handle Error, for example:
    throw new Error(`Could not find component by URL ${path}`);
}
const { Content, headings, remarkPluginFrontmatter } = await render(component);
console.log('test', remarkPluginFrontmatter);
const importPath = `${remarkPluginFrontmatter.mdjsStoriesPath}`;
console.log({ importPath });
// if (remarkPluginFrontmatter.mdjsStoriesPath) {
//   import(remarkPluginFrontmatter.mdjsStoriesPath);
// }
// console.log(component);
// const inPageNavData = [
//     {
//         name: component.name,
//         url: getAnchorTitle(component.name),
//     },
//     {
//         name: "Examples",
//         url: "#examples",
//         children: demosForCurrentComponent.map((entry) => ({
//             name: entry.data.title,
//             url: `#${getAnchorTitle(entry.data.title)}`,
//         })),
//     },
// ];

---

<MainLayout>
  <!-- Store the message prop as a data attribute. -->
  <load-demo data-import-path={importPath}></load-demo>

  <script>
    class LoadDemo extends HTMLElement {
      connectedCallback() {
        console.log(`../../mdjs-stories/${this.dataset.importPath}.js`);
        import(`../../mdjs-stories/${this.dataset.importPath}.js`);
      }
    }

    customElements.define('load-demo', LoadDemo);

    const currentScript = [...document.scripts].find(script => script.src === import.meta.url);

    currentScript.setAttribute('mdjs-setup', 'true');
  </script>

    <Content />
</MainLayout>
