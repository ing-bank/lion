import fs from 'node:fs';
import path from 'node:path';


const localizeContent = /** @param {string} cmpName */ cmpName => `
/**
 * THIS IS GENERATED FILE. PLEASE DO NOT EDIT IT MANUALLY
 * GENERATED BY \`node scripts/localize.mjs\`
 */
export const localizeNamespaceLoader = /** @param {string} locale */ locale => {
  switch (locale) {
    case 'bg-BG':
    case 'bg':
      return import('@lion/ui/${cmpName}-translations/bg.js');
    case 'cs-CZ':
    case 'cs':
      return import('@lion/ui/${cmpName}-translations/cs.js');
    case 'de-AT':
    case 'de-DE':
    case 'de':
      return import('@lion/ui/${cmpName}-translations/de.js');
    case 'en-AU':
    case 'en-GB':
    case 'en-PH':
    case 'en-US':
    case 'en':
      return import('@lion/ui/${cmpName}-translations/en.js');
    case 'es-ES':
    case 'es':
      return import('@lion/ui/${cmpName}-translations/es.js');
    case 'fr-FR':
    case 'fr-BE':
    case 'fr':
      return import('@lion/ui/${cmpName}-translations/fr.js');
    case 'hu-HU':
    case 'hu':
      return import('@lion/ui/${cmpName}-translations/hu.js');
    case 'it-IT':
    case 'it':
      return import('@lion/ui/${cmpName}-translations/it.js');
    case 'nl-BE':
    case 'nl-NL':
    case 'nl':
      return import('@lion/ui/${cmpName}-translations/nl.js');
    case 'pl-PL':
    case 'pl':
      return import('@lion/ui/${cmpName}-translations/pl.js');
    case 'ro-RO':
    case 'ro':
      return import('@lion/ui/${cmpName}-translations/ro.js');
    case 'ru-RU':
    case 'ru':
      return import('@lion/ui/${cmpName}-translations/ru.js');
    case 'sk-SK':
    case 'sk':
      return import('@lion/ui/${cmpName}-translations/sk.js');
    case 'uk-UA':
    case 'uk':
      return import('@lion/ui/${cmpName}-translations/uk.js');
    case 'zh-CN':
    case 'zh':
      return import('@lion/ui/${cmpName}-translations/zh.js');
    default:
      return import('@lion/ui/${cmpName}-translations/en.js');
  }
};
`
const components = './packages/ui/components';

// Make an async function that gets executed immediately
(async () => {
  // Our starting point
  try {
    // Get the files as an array
    const directories = await fs.promises.readdir(components);

    // Loop them all with the new for...of
    for (const cmpName of directories) {
      // Get the full paths
      const fromPath = path.join(components, cmpName);

      // Stat the cmpName to see if we have a cmpName or dir
      const stat = await fs.promises.stat(fromPath);


      const srcDir = path.join(components, cmpName, 'src');
      const translationsDir = path.join(components, cmpName, 'translations');
      const localizeNamespaces = path.join(components, cmpName, 'src', 'localizeNamespaceLoader.js');

      // If the component has `translations` and `src` folders. Then create `localizeNamespaceLoader.js` under `src`
      if (stat.isDirectory() && fs.existsSync(translationsDir) && fs.existsSync(srcDir)) {
        console.log('Create localize: %s ', localizeNamespaces);
        fs.writeFileSync(localizeNamespaces, localizeContent(cmpName));
      }
    } // End for...of
  } catch (e) {
    // Catch anything bad that happens
    console.error("We've thrown! Whoops!", e);
  }
})(); // Wrap in parenthesis and call now
